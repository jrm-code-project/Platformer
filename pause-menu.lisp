;;; -*- Lisp -*-

(in-package "PLATFORMER")

(defun-scaled pause-menu-width 258)
(defun-scaled pause-menu-height 389)
(defun pause-menu-x () (floor (- (/ (game-width) 2) (/ (pause-menu-width) 2))))
(defun-scaled pause-menu-y 25)
(defun-scaled sound-button-width 42)
(defun-scaled sound-button-height 42)

(defun-scaled music-button-position-x 450)
(defun-scaled music-button-position-y 140)

(defun-scaled sfx-button-position-x 450)
(defun-scaled sfx-button-position-y 186)

(defun-scaled volume-slider-width 28)
(defun-scaled volume-slider-height 45)
(defun-scaled volume-slider-y 278)
(defun base-volume-slider-background-offset () (* 28 3))
(defun-scaled volume-slider-background-width 215)
(defun-scaled volume-slider-background-height 45)
(defun volume-slider-background-x () (- (/ (game-width) 2) (/ (volume-slider-background-width) 2)))
(defun-scaled volume-slider-background-y 278)
(defun volume-slider-min () (+ (volume-slider-background-x) (scale 8)))
(defun volume-slider-max () (+ (volume-slider-background-x)
                               (- (volume-slider-background-width)
                                  (+ (scale 8) (volume-slider-width)))))

(defun-scaled urm-button-width 56)
(defun-scaled urm-button-height 56)

(defun-scaled home-button-position-x 313)
(defun-scaled home-button-position-y 325)

(defun-scaled restart-button-position-x 387)
(defun-scaled restart-button-position-y 325)

(defun-scaled resume-button-position-x 462)
(defun-scaled resume-button-position-y 325)


(defclass paused ()
  ((buttons :initarg :buttons :reader get-buttons)))

(defclass button ()
  ((row :initarg :row :accessor get-row)
   (column :initform 0 :accessor get-column)
   (position :initarg :position :accessor get-position)
   (action :initarg :action :reader get-action)))

(defun sound-button-under-mouse? (sound-button mouse-x mouse-y)
  (let* ((button-left (music-button-position-x))
         (button-right (+ button-left (sound-button-width)))
         (button-top (get-position sound-button))
         (button-bottom (+ button-top (sound-button-height))))
    (and (< button-left mouse-x button-right)
         (< button-top mouse-y button-bottom))))

(defun urm-button-under-mouse? (urm-button mouse-x mouse-y)
  (let* ((button-left (get-position urm-button))
         (button-right (+ button-left (urm-button-width)))
         (button-top (home-button-position-y))
         (button-bottom (+ button-top (urm-button-height))))
    (and (< button-left mouse-x button-right)
         (< button-top mouse-y button-bottom))))

(defun volume-slider-under-mouse? (volume-slider mouse-x mouse-y)
  (let* ((button-left (get-position volume-slider))
         (button-right (+ button-left (volume-slider-width)))
         (button-top (volume-slider-y))
         (button-bottom (+ button-top (volume-slider-height))))
    (and (< button-left mouse-x button-right)
         (< button-top mouse-y button-bottom))))

(defmethod game-step! (game (paused paused) dticks)
  (declare (ignore dticks))
  (multiple-value-bind (mouse-x mouse-y mouse-buttons) (sdl2:mouse-state)
    (dolist (sound-button (subseq (get-buttons paused) 0 2))
      (cond ((not (sound-button-under-mouse? sound-button mouse-x mouse-y))
             (setf (get-column sound-button) 0))
            ((logbitp 0 mouse-buttons)
             (ecase (get-column sound-button)
               (0 nil)
               (1 (setf (get-column sound-button) 2))
               (2 nil)))
            (t (ecase (get-column sound-button)
                 (0 (setf (get-column sound-button) 1))
                 (1 nil)
                 (2 (ecase (get-row sound-button)
                      (0 (setf (get-row sound-button) 1
                               (get-column sound-button) 0))
                      (1 (setf (get-row sound-button) 0
                               (get-column sound-button) 0))))))))
    (let ((volume-slider (third (get-buttons paused))))
      (cond ((not (volume-slider-under-mouse? volume-slider mouse-x mouse-y))
             (setf (get-column volume-slider) 0))
            ((logbitp 0 mouse-buttons)
             (ecase (get-column volume-slider)
               (0 nil)
               (1 (setf (get-column volume-slider) 2))
               (2 (setf (get-position volume-slider)
                        (min (volume-slider-max)
                             (max (volume-slider-min)
                                  (- mouse-x (/ (volume-slider-width) 2))))))))
            (t (ecase (get-column volume-slider)
                 (0 (setf (get-column volume-slider) 1))
                 (1 nil)
                 (2 (setf (get-column volume-slider) 0))))))
    (dolist (urm-button (subseq (get-buttons paused) 3 6))
      (cond ((not (urm-button-under-mouse? urm-button mouse-x mouse-y))
             (setf (get-column urm-button) 0))
            ((logbitp 0 mouse-buttons)
             (ecase (get-column urm-button)
               (0 nil)
               (1 (setf (get-column urm-button) 2))
               (2 nil)))
            (t (ecase (get-column urm-button)
                 (0 (setf (get-column urm-button) 1))
                 (1 nil)
                 (2 (setf (get-column urm-button) 0)
                  (funcall (get-action urm-button) game))))))
    ))

(defun render-sound-button! (renderer texture button x y)
  (sdl2:with-rects ((src (* (get-column button) (base-sound-button-width))
                         (* (get-row button) (base-sound-button-height))
                         (base-sound-button-width)
                         (base-sound-button-height))
                    (dst x
                         y
                         (sound-button-width)
                         (sound-button-height)))
    (sdl2:render-copy renderer texture :source-rect src :dest-rect dst)))

(defun render-music-button! (renderer sound-button-texture button)
  (render-sound-button! renderer sound-button-texture button
                        (music-button-position-x)
                        (music-button-position-y)))

(defun render-sfx-button! (renderer sound-button-texture button)
  (render-sound-button! renderer sound-button-texture button
                        (sfx-button-position-x)
                        (sfx-button-position-y)))

(defun render-sound-buttons! (renderer sound-button-texture buttons)
  (render-music-button! renderer sound-button-texture (first buttons))
  (render-sfx-button! renderer sound-button-texture (second buttons)))

(defun render-volume-slider-background! (renderer volume-button-texture)
  (sdl2:with-rects ((src (base-volume-slider-background-offset)
                         0
                         (base-volume-slider-background-width)
                         (base-volume-slider-background-height))
                    (dst (volume-slider-background-x)
                         (volume-slider-background-y)
                         (volume-slider-background-width)
                         (volume-slider-background-height)))
    (sdl2:render-copy renderer volume-button-texture :source-rect src :dest-rect dst)))

(defun render-volume-slider! (renderer volume-button-texture button)
  (sdl2:with-rects ((src (* (base-volume-slider-width) (get-column button))
                         0
                         (base-volume-slider-width)
                         (base-volume-slider-height))
                    (dst (get-position button)
                         (volume-slider-y)
                         (volume-slider-width)
                         (volume-slider-height)))
    (sdl2:render-copy renderer volume-button-texture :source-rect src :dest-rect dst)))

(defun render-urm-button! (renderer urm-button-texture button x y)
  (sdl2:with-rects ((src (* (get-column button) (base-urm-button-width))
                         (* (get-row button) (base-urm-button-height))
                         (base-urm-button-width)
                         (base-urm-button-height))
                    (dst x
                         y
                         (urm-button-width)
                         (urm-button-height)))
    (sdl2:render-copy renderer urm-button-texture :source-rect src :dest-rect dst)))

(defun render-home-button! (renderer urm-button-texture button)
  (render-urm-button! renderer urm-button-texture button (home-button-position-x) (home-button-position-y)))

(defun render-restart-button! (renderer urm-button-texture button)
  (render-urm-button! renderer urm-button-texture button (restart-button-position-x) (restart-button-position-y)))

(defun render-resume-button! (renderer urm-button-texture button)
  (render-urm-button! renderer urm-button-texture button (resume-button-position-x) (resume-button-position-y)))

(defun render-urm-buttons! (renderer urm-button-texture buttons)
  (render-resume-button! renderer urm-button-texture (fourth buttons))
  (render-restart-button! renderer urm-button-texture (fifth buttons))
  (render-home-button! renderer urm-button-texture (sixth buttons)))

(defun render-pause-menu-background! (renderer paused-texture)
  (sdl2:with-rects ((src 0 0 (base-pause-menu-width) (base-pause-menu-height))
                    (dst (pause-menu-x)
                         (pause-menu-y)
                         (pause-menu-width)
                         (pause-menu-height)))
    (sdl2:render-copy renderer paused-texture :source-rect src :dest-rect dst)))

(defun render-pause-menu! (renderer texture-map buttons)
  (render-pause-menu-background! renderer (texture/paused texture-map))
  (render-volume-slider-background! renderer (texture/volume texture-map))
  (render-sound-buttons! renderer (texture/sound texture-map) buttons)
  (render-volume-slider! renderer (texture/volume texture-map) (third buttons))
  (render-urm-buttons! renderer (texture/urm texture-map) buttons))

(defmethod render-game-state! (renderer texture-map game (game-state paused))
  (render-game-state! renderer texture-map game (get-level game))
  (render-pause-menu! renderer texture-map (get-buttons game-state)))
